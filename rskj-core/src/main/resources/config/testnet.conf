blockchain.config {
    name = testnet
    hardforkActivationHeights = {
        bahamas = 0,
        afterBridgeSync = 114000,
        orchid = 0,
        orchid060 = 0,
        wasabi100 = 0,
        twoToThree = 504000,
        papyrus200 = 863000,
        iris300 = 2060500,
        hop400 = 3103000,
        hop401 = 3362200,
        fingerroot500 = 4015800,
        arrowhead600 = 4927100
    },
    consensusRules = {
        rskip97 = -1, # disable orchid difficulty drop
        rskip132 = 43550, # enable recalculted receive headers cost
        rskip284 = 2581800,
        rskip290 = 2581800
    }
}

rpc {
    # callGasCap = 50000000
    # (experimental, OFF by default) RPC timeout in milliseconds. Disabled when it's zero.
    # timeout = 0
    # Maximum Response size allowed in bytes. If value is  0 then there is no limit.
    # maxResponseSize = 0

    # This property can be set to a numeric value by the node operator to over write the percentage for the
    # gas price multiplier used to calculate the gas price returned by eth_gasPrice
    # gasPriceMultiplier = 1.1

    providers {
        web {
            cors = "*"
            max_batch_requests_size = 100
            http {
                enabled = true
                bind_address = "0.0.0.0"
                # Hosts is the list of virtual host names allowed to interact with the JSON RPC
                # interface by checking the Host header of incoming requests. This whitelist is
                # intended to prevent DNS rebinding attacks.
                #
                # Setting it to `*` will allow interactions with any host and it will be enabled
                # by default.
                #
                # WARNING: it is highly recommended to disable wallet (within main.conf) while
                # hosts contains '*'
                #
                # This disables the protection, but can be useful in certain environments where
                # the clients don't have predictable host names, such as clouds. Disabling this
                # can be particularly risky if you run RSKj on a Desktop computer (where browsers could be targeted).
                # Allowing any host name in cloud environments should represent no risk in general.
                #
                # For more information, see: How your ethereum can be stolen through DNS rebinding:
                # https://blog.hacker.af/how-your-ethereum-can-be-stolen-using-dns-rebinding
                hosts = ["*"]
                # hosts = ["rsk-node", "localhost", "127.0.0.1", "enveloping-rskj", "host.docker.internal"]
                port = 4444
                # A value greater than zero sets the socket value in milliseconds. Node attempts to gently close all
                # TCP/IP connections with proper half close semantics, so a linger timeout should not be required and
                # thus the default is -1.
                linger_time = -1
                max_aggregated_frame_size = 5242880 # 5 mb, a chunked request can accumulate data up to this frame size
            }
            ws {
                enabled = true
                bind_address = "0.0.0.0"
                port = 4446
                # Shuts down the server when it's not able to write a response after a certain period (expressed in seconds)
                # server_write_timeout_seconds = 30
                # max_aggregated_frame_size = 5242880 # 5 mb, a chunked request can accumulate data up to this frame size
                # max_frame_size = 65536 # 64 kb, maximum supported frame size
            }
        }
    }
}

peer {

    discovery = {

        # if peer discovery is off
        # the peer window will show
        # only what retrieved by active
        # peer [true/false]
        enabled = true

        # List of the peers to start
        # the search of the online peers
        # values: [ip:port]
        ip.list = [
            "bootstrap01.testnet.rsk.co:50505",
            "bootstrap02.testnet.rsk.co:50505",
            "bootstrap03.testnet.rsk.co:50505",
            "bootstrap04.testnet.rsk.co:50505",
            "bootstrap05.testnet.rsk.co:50505",
            "bootstrap06.testnet.rsk.co:50505",
            "bootstrap07.testnet.rsk.co:50505",
            "bootstrap08.testnet.rsk.co:50505"
        ]
    }

    # Port for server to listen for incoming connections
    port = 50505

    # Network id
    networkId = 8100
}

# the number of milliseconds that should pass from a previous submission of a mining solution before next one is allowed
# set this value to zero or any negative number to disable this limit
miner.server.workSubmissionRateLimitInMills = 10000 # 10 secs

# the folder resources/genesis contains several versions of genesis configuration according to the network the peer will run on
genesis = orchid-testnet.json

database {
    # place to save physical storage files
    dir = ${user.home}/.rsk/testnet/database
    import {
        url = "https://import.testnet.rskcomputing.net/dbs/testnet/"
        trusted-keys = [
            "0437e3ab7b714831d84c75fa05752ef013947a00adfd6e088b75a7d9ff8e55430b10962e8b35a3bf74c9323c502022d64e7960526f68b903a50eb6f6096ebeb7ff",
            "04b39e3cf64a3889c41dac45fd42d280787a101786ffd574faa212ab66e0197c9bfd5cf4a36d0c0756cbcfd845ed470059391209e0bea3103a1e65fcea92fa4a7b",
            "04c64c11b9d9e68a60bd39f186bc1daa736d1330415fc285dccb0cfcff45dd054bf7701758051141b7718c67b20b4065d8a60a411db70221ff463b5b1cc27e6365"
        ]
    }

}

# hello phrase will be included in the hello message of the peer
hello.phrase = TestNet

# account loaded when the node start.
wallet {
    enabled = false
    accounts = []
}

#This is a suggested configuration for Full Sync in testnet, for block range 900k-1100k.
#cache {
#    btcBlockStore {
#        depth: 10000,
#        size: 20000
#    }
#}
